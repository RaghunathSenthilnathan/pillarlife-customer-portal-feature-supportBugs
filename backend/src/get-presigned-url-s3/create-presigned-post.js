"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFilePath = exports.createPresignedPost = void 0;
const aws_sdk_1 = require("aws-sdk");
function createPresignedPost({ fileType, filePath, identityId, }) {
    const params = {
        Bucket: process.env.BUCKET_NAME,
        Fields: { key: filePath, acl: 'public-read' },
        Conditions: [
            ['content-length-range', 0, 1000000],
            ['eq', '$Content-Type', fileType],
            ['starts-with', '$key', identityId],
        ],
        Expires: 15,
    };
    const s3 = new aws_sdk_1.S3();
    return s3.createPresignedPost(params);
}
exports.createPresignedPost = createPresignedPost;
function getFilePath(identityId) {
    const fileName = generateId();
    return `${identityId}/${fileName}`;
}
exports.getFilePath = getFilePath;
function generateId() {
    let result = '';
    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!-.*()';
    const length = 10;
    const charactersLength = characters.length;
    for (let i = 0; i < length; i += 1) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    const date = new Date().toISOString().split('T')[0].replace(/-/g, '');
    return `${date}_${result}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLXByZXNpZ25lZC1wb3N0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlLXByZXNpZ25lZC1wb3N0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUEyQjtBQVEzQixTQUFnQixtQkFBbUIsQ0FBQyxFQUNsQyxRQUFRLEVBQ1IsUUFBUSxFQUNSLFVBQVUsR0FDZ0I7SUFDMUIsTUFBTSxNQUFNLEdBQUc7UUFDYixNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXO1FBQy9CLE1BQU0sRUFBRSxFQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBQztRQUMzQyxVQUFVLEVBQUU7WUFFVixDQUFDLHNCQUFzQixFQUFFLENBQUMsRUFBRSxPQUFPLENBQUM7WUFHcEMsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLFFBQVEsQ0FBQztZQUNqQyxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDO1NBQ3BDO1FBRUQsT0FBTyxFQUFFLEVBQUU7S0FDWixDQUFDO0lBRUYsTUFBTSxFQUFFLEdBQUcsSUFBSSxZQUFFLEVBQUUsQ0FBQztJQUNwQixPQUFRLEVBQUUsQ0FBQyxtQkFBbUIsQ0FDNUIsTUFBTSxDQUNrQyxDQUFDO0FBQzdDLENBQUM7QUF4QkQsa0RBd0JDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLFVBQWtCO0lBQzVDLE1BQU0sUUFBUSxHQUFHLFVBQVUsRUFBRSxDQUFDO0lBQzlCLE9BQU8sR0FBRyxVQUFVLElBQUksUUFBUSxFQUFFLENBQUM7QUFDckMsQ0FBQztBQUhELGtDQUdDO0FBRUQsU0FBUyxVQUFVO0lBQ2pCLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNoQixNQUFNLFVBQVUsR0FDZCxzRUFBc0UsQ0FBQztJQUV6RSxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFFbEIsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO0lBQzNDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNsQyxNQUFNLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7S0FDM0U7SUFFRCxNQUFNLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRXRFLE9BQU8sR0FBRyxJQUFJLElBQUksTUFBTSxFQUFFLENBQUM7QUFDN0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UzN9IGZyb20gJ2F3cy1zZGsnO1xuXG50eXBlIEdldFByZXNpZ25lZFBvc3RVcmxQYXJhbXMgPSB7XG4gIGZpbGVUeXBlOiBzdHJpbmc7XG4gIGZpbGVQYXRoOiBzdHJpbmc7XG4gIGlkZW50aXR5SWQ6IHN0cmluZztcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcmVzaWduZWRQb3N0KHtcbiAgZmlsZVR5cGUsXG4gIGZpbGVQYXRoLFxuICBpZGVudGl0eUlkLFxufTogR2V0UHJlc2lnbmVkUG9zdFVybFBhcmFtcyk6IFByb21pc2U8UzMuUHJlc2lnbmVkUG9zdD4ge1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgQnVja2V0OiBwcm9jZXNzLmVudi5CVUNLRVRfTkFNRSxcbiAgICBGaWVsZHM6IHtrZXk6IGZpbGVQYXRoLCBhY2w6ICdwdWJsaWMtcmVhZCd9LFxuICAgIENvbmRpdGlvbnM6IFtcbiAgICAgIC8vIGNvbnRlbnQgbGVuZ3RoIHJlc3RyaWN0aW9uczogMC0xTUJdXG4gICAgICBbJ2NvbnRlbnQtbGVuZ3RoLXJhbmdlJywgMCwgMTAwMDAwMF0sXG4gICAgICAvLyBzcGVjaWZ5IGNvbnRlbnQtdHlwZSB0byBiZSBtb3JlIGdlbmVyaWMtIGltYWdlcyBvbmx5XG4gICAgICAvLyBbJ3N0YXJ0cy13aXRoJywgJyRDb250ZW50LVR5cGUnLCAnaW1hZ2UvJ10sXG4gICAgICBbJ2VxJywgJyRDb250ZW50LVR5cGUnLCBmaWxlVHlwZV0sXG4gICAgICBbJ3N0YXJ0cy13aXRoJywgJyRrZXknLCBpZGVudGl0eUlkXSxcbiAgICBdLFxuICAgIC8vIG51bWJlciBvZiBzZWNvbmRzIGZvciB3aGljaCB0aGUgcHJlc2lnbmVkIHBvbGljeSBzaG91bGQgYmUgdmFsaWRcbiAgICBFeHBpcmVzOiAxNSxcbiAgfTtcblxuICBjb25zdCBzMyA9IG5ldyBTMygpO1xuICByZXR1cm4gKHMzLmNyZWF0ZVByZXNpZ25lZFBvc3QoXG4gICAgcGFyYW1zLFxuICApIGFzIHVua25vd24pIGFzIFByb21pc2U8UzMuUHJlc2lnbmVkUG9zdD47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWxlUGF0aChpZGVudGl0eUlkOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBmaWxlTmFtZSA9IGdlbmVyYXRlSWQoKTtcbiAgcmV0dXJuIGAke2lkZW50aXR5SWR9LyR7ZmlsZU5hbWV9YDtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVJZCgpIHtcbiAgbGV0IHJlc3VsdCA9ICcnO1xuICBjb25zdCBjaGFyYWN0ZXJzID1cbiAgICAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkhLS4qKCknO1xuXG4gIGNvbnN0IGxlbmd0aCA9IDEwO1xuXG4gIGNvbnN0IGNoYXJhY3RlcnNMZW5ndGggPSBjaGFyYWN0ZXJzLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHJlc3VsdCArPSBjaGFyYWN0ZXJzLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzTGVuZ3RoKSk7XG4gIH1cblxuICBjb25zdCBkYXRlID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0ucmVwbGFjZSgvLS9nLCAnJyk7XG5cbiAgcmV0dXJuIGAke2RhdGV9XyR7cmVzdWx0fWA7XG59XG4iXX0=